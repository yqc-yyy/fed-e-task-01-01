
//TypeScript 解决了JavaScript类型系统的问题


//强类型和弱类型-----类型安全
//强类型---在语言层面限制函数的实参类型必须与形参类型相同----不允许有任意的隐式类型转换


//变量类型允许随时改变的特点，不是强弱类型的差异


//弱类型----在语言层面不会限制实参的类型----允许有任意的隐式类型转换----语言语法层面没有错误，但运行时可能会出错
//---js算数运算符会导致隐式类型转换
   '100'-2  //98
   '100' +2//1002
   "100"/2  //50
   "100"*2//200
  

//静态类型和动态类型----类型检查

//静态类型----一个变量声明时它的类型就是明确的，在声明过后，它的类型就不允许再修改

//动态类型----在运行阶段才能明确变量的类型，而且变量的类型随时可以改变
//在动态类型语言中的变量是没有类型的，而变量中存放的值是有类型的


//JavaScript类型系统特征---弱类型且动态类型
//缺失了类型系统的可靠性
//导致原因----早期js应用简单，js是脚本语言没有编译环节（编译阶段需要进行类型检查）


//js 弱类型的问题
  //只有等到运行时才能发现代码的类型异常问题
  //



//类型推断----flow可以推断出变量和参数的具体类型

//类型注解----


//原始类型
  const a:string = "flow"

  const b:number = Infinity//NaN//100

  const c:boolean=false //true

  const d:null =null

  const e:void=undefined

  const f: symbol =Symbol